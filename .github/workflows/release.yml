# vim:et:ts=2:sw=2

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - 'release*'
      - 'prerelease*'
      - 'prerelease'
      - 'testing' # for public testing
      - 'gh-actions' # only for testing

name: Create Release

# TODO:
# [ ] run tests on each build (as last check before creating release)
# [ ] label package files with "prerelease" if they're not a release

jobs:
  build_windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup environment
        shell: powershell
        id: set_vars
        run: .\scripts\ci-set-vars.ps1
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "vcpkg: Install dependencies"
        uses: lukka/run-vcpkg@v5
        id: runvcpkg
        with:
          vcpkgArguments: freetype fontconfig harfbuzz angle
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgGitCommitId: 69478c5caafcde4c490bb1fccb960296801dbb5f
          vcpkgTriplet: x64-windows
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: "create build directory"
        run: mkdir build
      - name: "Generate build files"
        run: cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DYAML_BUILD_SHARED_LIBS=OFF -DCONTOUR_EXAMPLES=OFF -DLIBTERMINAL_TESTING=OFF -DLIBUNICODE_TESTING=OFF -DYAML_CPP_BUILD_CONTRIB=OFF -DYAML_CPP_BUILD_TESTS=OFF -DYAML_CPP_BUILD_TOOLS=OFF -DYAML_CPP_INSTALL=OFF -B build .
      - name: "Build"
        run: cmake --build build/ --config Release
      - name: "Create Package(s)"
        run: cd build ; cpack
      - name: inspect
        run: Get-ChildItem -Recurse
      - name: "Rename packages"
        run: |
          mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.msi" "contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi"
          mv "build\Contour-${{ steps.set_vars.outputs.version }}-win64.zip" "contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.zip"
      - name: "Inspect again"
        run: Get-ChildItem
      - name: "Uploading MSI to artifact store"
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi
          retention-days: 30
      - name: "Uploading ZIP to artifact store"
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.zip
          retention-days: 30

  build_ubuntu1804:
    name: Build on Ubuntu 18.04
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "install dependencies"
        run: |
          set -ex
          cat /etc/apt/sources.list
          sudo apt -q update
          sudo apt install -y "g++-9" cmake \
                  libfreetype6-dev \
                  qtbase5-dev libqt5gui5 extra-cmake-modules libkf5windowsystem-dev \
                  libfontconfig1-dev libharfbuzz-dev \
                  debhelper dpkg-dev
      - name: "create debian package"
        run: |
          set -ex
          ./scripts/mkdebchangelog.sh "${{ steps.set_vars.outputs.version }}" "${{ steps.set_vars.outputs.RUN_ID }}"
          VERSION="${{ steps.set_vars.outputs.version }}"
          INCR="${{ steps.set_vars.outputs.RUN_ID }}"
          sed -i -e "s/0.0.0-1/${VERSION}-${INCR}/g" debian/changelog
          dpkg-buildpackage -uc -us
          mkdir target
          mv ../contour*.* target/
      - name: "Rename files"
        run: |
          mv -v "target/contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}_amd64.deb" "contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.deb"
          mv -v "target/contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}_amd64.ddeb" "contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.ddeb"
      - name: "Uploading artifact .deb package"
        uses: actions/upload-artifact@v2
        with:
          path: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.deb
          retention-days: 30
      - name: "Uploading artifact .ddeb package (debugging symbols)"
        uses: actions/upload-artifact@v2
        with:
          path: contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.ddeb
          retention-days: 30

  build_ubuntu2004:
    name: Build on Ubuntu 20.04
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "install dependencies"
        run: |
          set -ex
          cat /etc/apt/sources.list
          sudo apt -q update
          sudo apt install -y "g++-9" cmake \
                  libfreetype6-dev \
                  qtbase5-dev libqt5gui5 extra-cmake-modules libkf5windowsystem-dev \
                  libfontconfig1-dev libharfbuzz-dev \
                  debhelper dpkg-dev
      - name: "create debian package"
        run: |
          set -ex
          ./scripts/mkdebchangelog.sh "${{ steps.set_vars.outputs.version }}" "${{ steps.set_vars.outputs.RUN_ID }}"
          VERSION="${{ steps.set_vars.outputs.version }}"
          INCR="${{ steps.set_vars.outputs.RUN_ID }}"
          sed -i -e "s/0.0.0-1/${VERSION}-${INCR}/g" debian/changelog
          dpkg-buildpackage -uc -us
          mkdir target
          mv ../contour*.* target/
      - name: "Rename files"
        run: |
          mv -v "target/contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}_amd64.deb" "contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.deb"
          mv -v "target/contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}_amd64.ddeb" "contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.ddeb"
      - name: "Uploading artifact .deb package"
        uses: actions/upload-artifact@v2
        with:
          path: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.deb
          retention-days: 30
      - name: "Uploading artifact .ddeb package (debugging symbols)"
        uses: actions/upload-artifact@v2
        with:
          path: contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.ddeb
          retention-days: 30

  build_osx:
    name: Build on OS/X
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: "Install dependencies"
        run: |
          set -ex
          #brew update
          brew install freetype fontconfig qt5 harfbuzz boost pkg-config
      - name: "Create build directory"
        run: mkdir build
      - name: "Generate build files"
        run: |
          cmake . \
                -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                -DYAML_BUILD_SHARED_LIBS=OFF -DYAML_CPP_BUILD_CONTRIB=OFF \
                -DYAML_CPP_BUILD_TESTS=OFF -DYAML_CPP_BUILD_TOOLS=OFF \
                -DYAML_CPP_INSTALL=OFF \
                -DQt5_DIR="$(brew --prefix qt5)/lib/cmake/Qt5" \
                -B build/
      - name: "Build"
        run: cmake --build build/
      - name: "test: libcrispy"
        run: ./build/src/crispy/crispy_test
      - name: "test: libterminal"
        run: ./build/src/terminal/terminal_test
      - name: inspect
        run: |
          find build/ -print
          echo "TODO: upload to artifact store"
      - name: "Create Package(s)"
        run: |
          set -ex
          cd build
          sudo cpack
          BASENAME="contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx"
          mv -vf "Contour-${{ steps.set_vars.outputs.version }}-Darwin.zip" "../${BASENAME}.zip"
          mv -vf "Contour-${{ steps.set_vars.outputs.version }}-Darwin.dmg" "../${BASENAME}.dmg"
      - name: upload to artifact store (ZIP)
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.zip
          retention-days: 30
      - name: upload to artifact store (DMG)
        uses: actions/upload-artifact@v2
        with:
          path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.dmg
          retention-days: 30
  build_archlinux:
    strategy:
      matrix:
        arch:
          [
              "linux/amd64 x86_64",
              "linux/arm64/v8 aarch64",
          ]
    name: "Archlinux ${{ matrix.arch }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Read info
        id: tags
        shell: bash
        run: |
          arch="${{ matrix.arch }}"
          echo ::set-output name=PLATFORM::${arch%% *}
          echo ::set-output name=ARCH::${arch##* }
      - name: set environment variables
        id: set_vars
        run: ./scripts/ci-set-vars.sh
        env:
          REPOSITORY: ${{ github.event.repository.name }}
      - name: Build ${{ matrix.arch }} release
        shell: bash
        run: |
          docker buildx build --platform ${{ steps.tags.outputs.PLATFORM }} \
          --tag contour:${{ steps.tags.outputs.ARCH }} \
          -f .github/archlinux/Dockerfile \
          --load \
          .
          docker create --name contour-${{ steps.tags.outputs.ARCH }} contour:${{ steps.tags.outputs.ARCH }}
          docker cp contour-${{ steps.tags.outputs.ARCH }}:/app/contour.pkg.tar.zst contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst
          docker container rm contour-${{ steps.tags.outputs.ARCH }}
      - name: "Uploading Archlinux .pkg.tar.zst package"
        uses: actions/upload-artifact@v2
        with:
          name: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-archlinux_${{ steps.tags.outputs.ARCH }}
          path: "contour-${{ steps.tags.outputs.ARCH }}.pkg.tar.zst"
          if-no-files-found: error
          retention-days: 30

  do_release:
    name: Create Github release
    runs-on: ubuntu-latest
    needs: [build_ubuntu1804, build_ubuntu2004, build_windows, build_osx, build_archlinux]
    steps:
      - uses: actions/checkout@v2
      - name: set variables
        id: set_vars
        run: |
          VERSION=$(grep '^### ' Changelog.md | head -n1 | awk '{print $2}')
          SUFFIX=$(grep '^### ' Changelog.md | head -n1 | awk '{print $3}' | tr -d '()')
          if [ $REPOSITORY = "master" ]; then IS_PRE='false'; else IS_PRE='true'; fi
          if [ $REPOSITORY = "master" ]; then SUFFIX=''     ; else SUFFIX='prerelease'; fi
          if [ $REPOSITORY != "master" ]; then
            TAG_SUFFIX="_prerelease_${GITHUB_RUN_NUMBER}"
          else
            TAG_SUFFIX=""
          fi
          RELEASEBODY=$(awk -v RS='^### ' '/^'$VERSION'/ {print $0}' Changelog.md | tail -n+3)
          RELEASEBODY="${RELEASEBODY//'%'/'%25'}"
          RELEASEBODY="${RELEASEBODY//$'\n'/'%0A'}"
          RELEASEBODY="${RELEASEBODY//$'\r'/'%0D'}"

          echo "::set-output name=version::${VERSION}"
          echo "::set-output name=tag_suffix::${TAG_SUFFIX}"
          echo "::set-output name=RUN_ID::${GITHUB_RUN_NUMBER}"
          echo "::set-output name=IS_PRERELEASE::${IS_PRE}"
          echo "::set-output name=RELEASENAME_SUFFIX::${SUFFIX}"
          echo "::set-output name=RELEASEBODY::${RELEASEBODY}"
        env:
          REPOSITORY: ${{ github.event.repository.name }}

      - name: fetch release artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name: "inspect"
        run: ls -lisahF
      - name: inspect recurse
        run: pwd; ls -hlaR

      # -------------------------------------------------------------
      - name: Create Github release page
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # token provided by Actions
        with:
          tag_name: v${{ steps.set_vars.outputs.version }}${{ steps.set_vars.outputs.tag_suffix}}
          release_name: contour ${{ steps.set_vars.outputs.version }} ${{ steps.set_vars.outputs.RELEASENAME_SUFFIX}}
          body: |
            ${{ steps.set_vars.outputs.RELEASEBODY }}
          draft: true
          prerelease: ${{ steps.set_vars.outputs.IS_PRERELEASE }}

      # -------------------------------------------------------------
      - name: Upload Ubuntu 18.04 package (.deb)
        id: upload-release-asset-deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.deb
          asset_name: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Ubuntu 18.04 debug package (.ddeb)
        id: upload-release-asset-ddeb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.ddeb
          asset_name: contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_18_04_amd64.ddeb
          asset_content_type: application/vnd.debian.binary-package

      # -------------------------------------------------------------
      - name: Upload Ubuntu 20.04 package (.deb)
        id: upload-release-asset-deb-2004
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.deb
          asset_name: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Ubuntu 20.04 debug package (.ddeb)
        id: upload-release-asset-ddeb-2004
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.ddeb
          asset_name: contour-dbgsym_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-ubuntu_20_04_amd64.ddeb
          asset_content_type: application/vnd.debian.binary-package

      # -------------------------------------------------------------
      - name: Upload Archlinux package x86_64
        id: upload-release-asset-archlinux-x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-archlinux_x86_64
          asset_name: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-archlinux_aarch64.pkg.tar.zst
          asset_content_type: application/x-zstd-compressed-tar

      - name: Upload Archlinux package aarch64
        id: upload-release-asset-archlinux-aarch64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-archlinux_aarch64
          asset_name: contour_${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-archlinux_aarch64.pkg.tar.zst
          asset_content_type: application/x-zstd-compressed-tar

      # -------------------------------------------------------------
      - name: Upload Windows MSI package
        id: upload-release-msi-asset-winx64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi
          asset_name: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.msi
          asset_content_type: application/octet-stream

      # -------------------------------------------------------------
      - name: Upload Windows ZIP package
        id: upload-release-zip-asset-winx64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.zip
          asset_name: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-win64.zip
          asset_content_type: application/zip

      # -------------------------------------------------------------
      - name: Upload OS/X ZIP package
        id: upload-release-asset-osx-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.zip
          asset_name: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.zip
          asset_content_type: application/zip

      # -------------------------------------------------------------
      - name: Upload OS/X DMG package
        id: upload-release-asset-osx-dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.dmg
          asset_name: contour-${{ steps.set_vars.outputs.version }}-${{ steps.set_vars.outputs.RUN_ID }}-osx.dmg
          asset_content_type: application/x-apple-diskimage

